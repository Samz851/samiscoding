!function(n){"use strict";var e="https://facebook.us8.list-manage.com/subscribe/post?u=cdb7b577e41181934ed6a6a44&amp;id=e6957d85dc",a=n(window);document.documentElement.setAttribute("data-useragent",navigator.userAgent);var s,o,i,t;n("html").addClass("cl-preload"),a.on("load",function(){n("#loader").fadeOut("slow",function(){n("#preloader").delay(300).fadeOut("slow")}),n("html").removeClass("cl-preload"),n("html").addClass("cl-loaded")}),s=n(".header-menu-toggle"),a.on("scroll",function(){150<a.scrollTop()?s.addClass("opaque"):s.removeClass("opaque")}),function(){var a=n(".header-menu-toggle"),e=n(".header-nav").find(".header-nav__close"),s=n("body");n("section, footer");a.on("click",function(e){e.preventDefault(),s.toggleClass("menu-is-open")}),e.on("click",function(e){e.preventDefault(),a.trigger("click")}),s.on("click",function(e){n(e.target).is(".header-nav, .header-nav__content, .header-menu-toggle, .header-menu-toggle span")||s.removeClass("menu-is-open")})}(),o=n(".about-stats"),i=n(".stats__count"),o.waypoint({handler:function(e){"down"===e&&i.each(function(){var a=n(this);n({Counter:0}).animate({Counter:a.text()},{duration:4e3,easing:"swing",step:function(e){a.text(Math.ceil(e))}})}),this.destroy()},offset:"90%"}),n(".clients").slick({arrows:!1,dots:!0,infinite:!0,slidesToShow:6,slidesToScroll:2,autoplay:!0,pauseOnFocus:!1,autoplaySpeed:1e3,responsive:[{breakpoint:1200,settings:{slidesToShow:5}},{breakpoint:1e3,settings:{slidesToShow:4}},{breakpoint:800,settings:{slidesToShow:3,slidesToScroll:2}},{breakpoint:500,settings:{slidesToShow:2,slidesToScroll:2}}]}),n(".testimonials").slick({arrows:!0,autoplay:!0,dots:!1,infinite:!0,slidesToShow:1,slidesToScroll:1,adaptiveHeight:!0,pauseOnFocus:!1,autoplaySpeed:3e3,responsive:[{breakpoint:900,settings:{slidesToShow:1,slidesToScroll:1}},{breakpoint:800,settings:{arrows:!1,dots:!0}}]}),n("input, textarea, select").placeholder(),n(".alert-box").on("click",".alert-box__close",function(){n(this).parent().fadeOut(500)}),AOS.init({offset:200,duration:500,easing:"ease-in-sine",delay:200,once:!0,disable:"mobile"}),n("#mc-form").ajaxChimp({language:"es",url:e}),n.ajaxChimp.translations.es={submit:"Submitting...",0:'<i class="fa fa-check"></i> We have sent you a confirmation email',1:'<i class="fa fa-warning"></i> You must enter a valid e-mail address.',2:'<i class="fa fa-warning"></i> E-mail address is not valid.',3:'<i class="fa fa-warning"></i> E-mail address is not valid.',4:'<i class="fa fa-warning"></i> E-mail address is not valid.',5:'<i class="fa fa-warning"></i> E-mail address is not valid.'},t=n(".go-top"),n(window).on("scroll",function(){500<=n(window).scrollTop()?t.fadeIn(400):t.fadeOut(400)}),window.clContactForm=function(e){console.log(e);var a=n(".submit-loader"),s=n("form").attr("cl-form-type");console.log(s);var o={form:s,formData:n("#contactForm").serialize()};n.ajax({type:"POST",url:"packages/sam/theme-SAM/inc/sendEmail.php",contentType:"application/json",data:JSON.stringify(o),beforeSend:function(){a.slideDown("slow")},success:function(e){"OK"==e?(a.slideUp("slow"),n(".message-warning1").fadeOut(),n("#contactForm, #formmaker-form").fadeOut(),n(".message-success1").fadeIn()):(a.slideUp("slow"),n(".message-warning1").html(e),n(".message-warning1").slideDown("slow"))},error:function(){a.slideUp("slow"),n(".message-warning1").html("Something went wrong. Please try again. or contact us directly at <a href='mailto:sam@samiscoding.com'><strong>SAM@samiscoding.com</strong></a>"),n(".message-warning1").slideDown("slow")}})},window.clBenchmarkForm=function(){var a=n(".submit-loader"),e=n("form").attr("cl-form-type");console.log(e);var s={form:e,formData:n("#formmaker-form").serialize()};n.ajax({type:"POST",url:"packages/sam/theme-SAM/inc/sendEmail.php",data:JSON.stringify(s),beforeSend:function(){a.slideDown("slow")},success:function(e){"OK"==e?(a.slideUp("slow"),n(".message-warning1").fadeOut(),n("#formmaker-form").fadeOut(),n(".message-success1").fadeIn()):(a.slideUp("slow"),n(".message-warning1").html(e),n(".message-warning1").slideDown("slow"))},error:function(){a.slideUp("slow"),n(".message-warning1").html("Something went wrong. Please try again."),n(".message-warning1").slideDown("slow")}})}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiJCIsImNmZyIsIiRXSU4iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsInNldEF0dHJpYnV0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm1lbnVUcmlnZ2VyIiwic3RhdFNlY3Rpb24iLCJzdGF0cyIsImdvVG9wQnV0dG9uIiwiYWRkQ2xhc3MiLCJvbiIsImZhZGVPdXQiLCJkZWxheSIsInJlbW92ZUNsYXNzIiwic2Nyb2xsVG9wIiwiY2xvc2VCdXR0b24iLCJmaW5kIiwic2l0ZUJvZHkiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDbGFzcyIsInRyaWdnZXIiLCJ0YXJnZXQiLCJpcyIsImNsT2ZmQ2FudmFzIiwid2F5cG9pbnQiLCJoYW5kbGVyIiwiZGlyZWN0aW9uIiwiZWFjaCIsIiR0aGlzIiwidGhpcyIsIkNvdW50ZXIiLCJhbmltYXRlIiwidGV4dCIsImR1cmF0aW9uIiwiZWFzaW5nIiwic3RlcCIsImN1clZhbHVlIiwiTWF0aCIsImNlaWwiLCJkZXN0cm95Iiwib2Zmc2V0Iiwic2xpY2siLCJhcnJvd3MiLCJkb3RzIiwiaW5maW5pdGUiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsImF1dG9wbGF5IiwicGF1c2VPbkZvY3VzIiwiYXV0b3BsYXlTcGVlZCIsInJlc3BvbnNpdmUiLCJicmVha3BvaW50Iiwic2V0dGluZ3MiLCJhZGFwdGl2ZUhlaWdodCIsInBsYWNlaG9sZGVyIiwicGFyZW50IiwiQU9TIiwiaW5pdCIsIm9uY2UiLCJkaXNhYmxlIiwiYWpheENoaW1wIiwibGFuZ3VhZ2UiLCJ1cmwiLCJ0cmFuc2xhdGlvbnMiLCJlcyIsInN1Ym1pdCIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsImZhZGVJbiIsImNsQ29udGFjdEZvcm0iLCJ0b2tlbiIsImNvbnNvbGUiLCJsb2ciLCJzTG9hZGVyIiwiZm9ybVR5cGUiLCJhdHRyIiwiZGF0YSIsImZvcm0iLCJmb3JtRGF0YSIsInNlcmlhbGl6ZSIsImFqYXgiLCJ0eXBlIiwiY29udGVudFR5cGUiLCJKU09OIiwic3RyaW5naWZ5IiwiYmVmb3JlU2VuZCIsInNsaWRlRG93biIsInN1Y2Nlc3MiLCJtc2ciLCJzbGlkZVVwIiwiaHRtbCIsImVycm9yIiwiY2xCZW5jaG1hcmtGb3JtIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQ0FLQSxTQUFVQSxHQUVOLGFBRUEsSUFBSUMsRUFFaUIsb0dBR3JCQyxFQUFPRixFQUFFRyxRQUlDQyxTQUFTQyxnQkFDZkMsYUFBYSxpQkFBa0JDLFVBQVVDLFdBSzdDLElBMkJRQyxFQTJHQUMsRUFDQUMsRUE4VEpDLEVBbmNBWixFQUFFLFFBQVFhLFNBQVMsY0FFbkJYLEVBQUtZLEdBQUcsT0FBUSxXQU1aZCxFQUFFLFdBQVdlLFFBQVEsT0FBUSxXQUV6QmYsRUFBRSxjQUFjZ0IsTUFBTSxLQUFLRCxRQUFRLFVBSXZDZixFQUFFLFFBQVFpQixZQUFZLGNBQ3RCakIsRUFBRSxRQUFRYSxTQUFTLGVBVW5CSixFQUFjVCxFQUFFLHVCQUVwQkUsRUFBS1ksR0FBRyxTQUFVLFdBRVMsSUFBbkJaLEVBQUtnQixZQUNMVCxFQUFZSSxTQUFTLFVBR3JCSixFQUFZUSxZQUFZLFlBU2xCLFdBRWQsSUFBSVIsRUFBa0JULEVBQUUsdUJBRXBCbUIsRUFEa0JuQixFQUFFLGVBQ0VvQixLQUFLLHNCQUMzQkMsRUFBa0JyQixFQUFFLFFBQ0ZBLEVBQUUsbUJBR3hCUyxFQUFZSyxHQUFHLFFBQVMsU0FBU1EsR0FDN0JBLEVBQUVDLGlCQUVGRixFQUFTRyxZQUFZLGtCQUl6QkwsRUFBWUwsR0FBRyxRQUFTLFNBQVNRLEdBQzdCQSxFQUFFQyxpQkFDRmQsRUFBWWdCLFFBQVEsV0FJeEJKLEVBQVNQLEdBQUcsUUFBUyxTQUFTUSxHQUNyQnRCLEVBQUVzQixFQUFFSSxRQUFRQyxHQUFHLHFGQUVoQk4sRUFBU0osWUFBWSxrQkFtWjdCVyxHQWxWSWxCLEVBQWNWLEVBQUUsZ0JBQ2hCVyxFQUFRWCxFQUFFLGlCQUVkVSxF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QU9rRyxnQkFySlUsV0FPVCxJQUFJbkIsRUFBVWxGLEVBQUUsa0JBQ1ptRixFQUFXbkYsRUFBRSxRQUFRb0YsS0FBSyxnQkFDOUJKLFFBQVFDLElBQUlFLEdBQ1osSUFBSUUsRUFBTyxDQUNQQyxLQUFNSCxFQUNOSSxTQUFVdkYsRUFBRSxtQkFBbUJ3RixhQUduQ3hGLEVBQUV5RixLQUFLLENBRUhDLEtBQU0sT0FDTnZCLElBQUssMkNBQ0xrQixLQUFNTyxLQUFLQyxVQUFVUixHQUNyQlMsV0FBWSxXQUVSWixFQUFRYSxVQUFVLFNBR3RCQyxRQUFTLFNBQVNDLEdBR0gsTUFBUEEsR0FDQWYsRUFBUWdCLFFBQVEsUUFDaEJsRyxFQUFFLHFCQUFxQmUsVUFDdkJmLEVBQUUsbUJBQW1CZSxVQUNyQmYsRUFBRSxxQkFBcUI2RSxXQUl2QkssRUFBUWdCLFFBQVEsUUFDaEJsRyxFQUFFLHFCQUFxQm1HLEtBQUtGLEdBQzVCakcsRUFBRSxxQkFBcUIrRixVQUFVLFVBSXpDSyxNQUFPLFdBRUhsQixFQUFRZ0IsUUFBUSxRQUNoQmxHLEVBQUUscUJBQXFCbUcsS0FBSywyQ0FDNUJuRyxFQUFFLHFCQUFxQitGLFVBQVUsWUFwWnpELENBNGZHTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogR2xpbnQgLSBNYWluIEpTXG4gKlxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4oZnVuY3Rpb24oJCkge1xuXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXG4gICAgdmFyIGNmZyA9IHtcbiAgICAgICAgc2Nyb2xsRHVyYXRpb24gOiA4MDAsIC8vIHNtb290aHNjcm9sbCBkdXJhdGlvblxuICAgICAgICBtYWlsQ2hpbXBVUkwgICA6ICdodHRwczovL2ZhY2Vib29rLnVzOC5saXN0LW1hbmFnZS5jb20vc3Vic2NyaWJlL3Bvc3Q/dT1jZGI3YjU3N2U0MTE4MTkzNGVkNmE2YTQ0JmFtcDtpZD1lNjk1N2Q4NWRjJyAgIC8vIG1haWxjaGltcCB1cmxcbiAgICB9LFxuXG4gICAgJFdJTiA9ICQod2luZG93KTtcblxuICAgIC8vIEFkZCB0aGUgVXNlciBBZ2VudCB0byB0aGUgPGh0bWw+XG4gICAgLy8gd2lsbCBiZSB1c2VkIGZvciBJRTEwIGRldGVjdGlvbiAoTW96aWxsYS81LjAgKGNvbXBhdGlibGU7IE1TSUUgMTAuMDsgV2luZG93cyBOVCA2LjI7IFRyaWRlbnQvNi4wKSlcbiAgICB2YXIgZG9jID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgIGRvYy5zZXRBdHRyaWJ1dGUoJ2RhdGEtdXNlcmFnZW50JywgbmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cblxuICAgLyogUHJlbG9hZGVyXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIHZhciBjbFByZWxvYWRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgJChcImh0bWxcIikuYWRkQ2xhc3MoJ2NsLXByZWxvYWQnKTtcblxuICAgICAgICAkV0lOLm9uKCdsb2FkJywgZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8vZm9yY2UgcGFnZSBzY3JvbGwgcG9zaXRpb24gdG8gdG9wIGF0IHBhZ2UgcmVmcmVzaFxuICAgICAgICAgICAgLy8gJCgnaHRtbCwgYm9keScpLmFuaW1hdGUoeyBzY3JvbGxUb3A6IDAgfSwgJ25vcm1hbCcpO1xuXG4gICAgICAgICAgICAvLyB3aWxsIGZpcnN0IGZhZGUgb3V0IHRoZSBsb2FkaW5nIGFuaW1hdGlvbiBcbiAgICAgICAgICAgICQoXCIjbG9hZGVyXCIpLmZhZGVPdXQoXCJzbG93XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIHdpbGwgZmFkZSBvdXQgdGhlIHdob2xlIERJViB0aGF0IGNvdmVycyB0aGUgd2Vic2l0ZS5cbiAgICAgICAgICAgICAgICAkKFwiI3ByZWxvYWRlclwiKS5kZWxheSgzMDApLmZhZGVPdXQoXCJzbG93XCIpO1xuICAgICAgICAgICAgfSk7IFxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBmb3IgaGVybyBjb250ZW50IGFuaW1hdGlvbnMgXG4gICAgICAgICAgICAkKFwiaHRtbFwiKS5yZW1vdmVDbGFzcygnY2wtcHJlbG9hZCcpO1xuICAgICAgICAgICAgJChcImh0bWxcIikuYWRkQ2xhc3MoJ2NsLWxvYWRlZCcpO1xuICAgICAgICBcbiAgICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAvKiBNZW51IG9uIFNjcm9sbGRvd25cbiAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIHZhciBjbE1lbnVPblNjcm9sbGRvd24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgXG4gICAgICAgIHZhciBtZW51VHJpZ2dlciA9ICQoJy5oZWFkZXItbWVudS10b2dnbGUnKTtcblxuICAgICAgICAkV0lOLm9uKCdzY3JvbGwnLCBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgaWYgKCRXSU4uc2Nyb2xsVG9wKCkgPiAxNTApIHtcbiAgICAgICAgICAgICAgICBtZW51VHJpZ2dlci5hZGRDbGFzcygnb3BhcXVlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZW51VHJpZ2dlci5yZW1vdmVDbGFzcygnb3BhcXVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuXG4gICAvKiBPZmZDYW52YXMgTWVudVxuICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgdmFyIGNsT2ZmQ2FudmFzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIG1lbnVUcmlnZ2VyICAgICA9ICQoJy5oZWFkZXItbWVudS10b2dnbGUnKSxcbiAgICAgICAgICAgIG5hdiAgICAgICAgICAgICA9ICQoJy5oZWFkZXItbmF2JyksXG4gICAgICAgICAgICBjbG9zZUJ1dHRvbiAgICAgPSBuYXYuZmluZCgnLmhlYWRlci1uYXZfX2Nsb3NlJyksXG4gICAgICAgICAgICBzaXRlQm9keSAgICAgICAgPSAkKCdib2R5JyksXG4gICAgICAgICAgICBtYWluQ29udGVudHMgICAgPSAkKCdzZWN0aW9uLCBmb290ZXInKTtcblxuICAgICAgICAvLyBvcGVuLWNsb3NlIG1lbnUgYnkgY2xpY2tpbmcgb24gdGhlIG1lbnUgaWNvblxuICAgICAgICBtZW51VHJpZ2dlci5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIC8vIG1lbnVUcmlnZ2VyLnRvZ2dsZUNsYXNzKCdpcy1jbGlja2VkJyk7XG4gICAgICAgICAgICBzaXRlQm9keS50b2dnbGVDbGFzcygnbWVudS1pcy1vcGVuJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNsb3NlIG1lbnUgYnkgY2xpY2tpbmcgdGhlIGNsb3NlIGJ1dHRvblxuICAgICAgICBjbG9zZUJ1dHRvbi5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIG1lbnVUcmlnZ2VyLnRyaWdnZXIoJ2NsaWNrJyk7XHRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xvc2UgbWVudSBjbGlja2luZyBvdXRzaWRlIHRoZSBtZW51IGl0c2VsZlxuICAgICAgICBzaXRlQm9keS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICAgICAgICAgIGlmKCAhJChlLnRhcmdldCkuaXMoJy5oZWFkZXItbmF2LCAuaGVhZGVyLW5hdl9fY29udGVudCwgLmhlYWRlci1tZW51LXRvZ2dsZSwgLmhlYWRlci1tZW51LXRvZ2dsZSBzcGFuJykgKSB7XG4gICAgICAgICAgICAgICAgLy8gbWVudVRyaWdnZXIucmVtb3ZlQ2xhc3MoJ2lzLWNsaWNrZWQnKTtcbiAgICAgICAgICAgICAgICBzaXRlQm9keS5yZW1vdmVDbGFzcygnbWVudS1pcy1vcGVuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuXG4gICAvKiBwaG90b3N3aXBlXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIHZhciBjbFBob3Rvc3dpcGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGl0ZW1zID0gW10sXG4gICAgICAgICAgICAkcHN3cCA9ICQoJy5wc3dwJylbMF0sXG4gICAgICAgICAgICAkZm9saW9JdGVtcyA9ICQoJy5pdGVtLWZvbGlvJyk7XG5cbiAgICAgICAgICAgIC8vIGdldCBpdGVtc1xuICAgICAgICAgICAgJGZvbGlvSXRlbXMuZWFjaCggZnVuY3Rpb24oaSkge1xuXG4gICAgICAgICAgICAgICAgdmFyICRmb2xpbyA9ICQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICR0aHVtYkxpbmsgPSAgJGZvbGlvLmZpbmQoJy50aHVtYi1saW5rJyksXG4gICAgICAgICAgICAgICAgICAgICR0aXRsZSA9ICRmb2xpby5maW5kKCcuaXRlbS1mb2xpb19fdGl0bGUnKSxcbiAgICAgICAgICAgICAgICAgICAgJGNhcHRpb24gPSAkZm9saW8uZmluZCgnLml0ZW0tZm9saW9fX2NhcHRpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgJHRpdGxlVGV4dCA9ICc8aDQ+JyArICQudHJpbSgkdGl0bGUuaHRtbCgpKSArICc8L2g0PicsXG4gICAgICAgICAgICAgICAgICAgICRjYXB0aW9uVGV4dCA9ICQudHJpbSgkY2FwdGlvbi5odG1sKCkpLFxuICAgICAgICAgICAgICAgICAgICAkaHJlZiA9ICR0aHVtYkxpbmsuYXR0cignaHJlZicpLFxuICAgICAgICAgICAgICAgICAgICAkc2l6ZSA9ICR0aHVtYkxpbmsuZGF0YSgnc2l6ZScpLnNwbGl0KCd4JyksXG4gICAgICAgICAgICAgICAgICAgICR3aWR0aCAgPSAkc2l6ZVswXSxcbiAgICAgICAgICAgICAgICAgICAgJGhlaWdodCA9ICRzaXplWzFdO1xuICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHNyYyAgOiAkaHJlZixcbiAgICAgICAgICAgICAgICAgICAgdyAgICA6ICR3aWR0aCxcbiAgICAgICAgICAgICAgICAgICAgaCAgICA6ICRoZWlnaHRcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoJGNhcHRpb24ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnRpdGxlID0gJC50cmltKCR0aXRsZVRleHQgKyAkY2FwdGlvblRleHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gYmluZCBjbGljayBldmVudFxuICAgICAgICAgICAgJGZvbGlvSXRlbXMuZWFjaChmdW5jdGlvbihpKSB7XG5cbiAgICAgICAgICAgICAgICAkKHRoaXMpLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0hpZGVPcGFjaXR5OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIFBob3RvU3dpcGVcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpZ2h0Qm94ID0gbmV3IFBob3RvU3dpcGUoJHBzd3AsIFBob3RvU3dpcGVVSV9EZWZhdWx0LCBpdGVtcywgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0Qm94LmluaXQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICB9O1xuICAgIFxuXG4gICAvKiBTdGF0IENvdW50ZXJcbiAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIHZhciBjbFN0YXRDb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHN0YXRTZWN0aW9uID0gJChcIi5hYm91dC1zdGF0c1wiKSxcbiAgICAgICAgICAgIHN0YXRzID0gJChcIi5zdGF0c19fY291bnRcIik7XG5cbiAgICAgICAgc3RhdFNlY3Rpb24ud2F5cG9pbnQoe1xuXG4gICAgICAgICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcblxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT09IFwiZG93blwiKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhdHMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHsgQ291bnRlcjogMCB9KS5hbmltYXRlKHsgQ291bnRlcjogJHRoaXMudGV4dCgpIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogNDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYXNpbmc6ICdzd2luZycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gKGN1clZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLnRleHQoTWF0aC5jZWlsKGN1clZhbHVlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfSBcblxuICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgb25jZSBvbmx5XG4gICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG5cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9mZnNldDogXCI5MCVcIlxuXG4gICAgICAgIH0pO1xuICAgIH07XG5cblxuICAgLyogTWFzb25yeVxuICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLyBcbiAgICAvLyB2YXIgY2xNYXNvbnJ5Rm9saW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIFxuICAgIC8vICAgICB2YXIgY29udGFpbmVyQnJpY2tzID0gJCgnLm1hc29ucnknKTtcblxuICAgIC8vICAgICBjb250YWluZXJCcmlja3MuaW1hZ2VzTG9hZGVkKGZ1bmN0aW9uICgpIHtcbiAgICAvLyAgICAgICAgIGNvbnRhaW5lckJyaWNrcy5tYXNvbnJ5KHtcbiAgICAvLyAgICAgICAgICAgICBpdGVtU2VsZWN0b3I6ICcubWFzb25yeV9fYnJpY2snLFxuICAgIC8vICAgICAgICAgICAgIHJlc2l6ZTogdHJ1ZVxuICAgIC8vICAgICAgICAgfSk7XG4gICAgLy8gICAgIH0pO1xuICAgIC8vIH07XG5cblxuICAgLyogc2xpY2sgc2xpZGVyXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgICB2YXIgY2xTbGlja1NsaWRlciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICQoJy5jbGllbnRzJykuc2xpY2soe1xuICAgICAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgICAgIGRvdHM6IHRydWUsXG4gICAgICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogNixcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXG4gICAgICAgICAgICBwYXVzZU9uRm9jdXM6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMTAwMCxcbiAgICAgICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiAxMDAwLFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtwb2ludDogODAwLFxuICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJy50ZXN0aW1vbmlhbHMnKS5zbGljayh7XG4gICAgICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgICAgIGFkYXB0aXZlSGVpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiBmYWxzZSxcbiAgICAgICAgICAgIGF1dG9wbGF5U3BlZWQ6IDMwMDAsXG4gICAgICAgICAgICByZXNwb25zaXZlOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBicmVha3BvaW50OiA5MDAsXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDgwMCxcbiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb3RzOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIFxuICAgIH07XG5cblxuICAgLyogUGxhY2Vob2xkZXIgUGx1Z2luIFNldHRpbmdzXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgICB2YXIgY2xQbGFjZWhvbGRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAkKCdpbnB1dCwgdGV4dGFyZWEsIHNlbGVjdCcpLnBsYWNlaG9sZGVyKCk7ICBcbiAgICB9O1xuXG5cbiAgIC8qIEFsZXJ0IEJveGVzXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgICB2YXIgY2xBbGVydEJveGVzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgJCgnLmFsZXJ0LWJveCcpLm9uKCdjbGljaycsICcuYWxlcnQtYm94X19jbG9zZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5mYWRlT3V0KDUwMCk7XG4gICAgICAgIH0pOyBcblxuICAgIH07XG5cblxuICAgLyogQ29udGFjdCBGb3JtXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgICB2YXIgY2xDb250YWN0Rm9ybSA9IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKHRva2VuKVxuICAgICAgICB2YXIgc0xvYWRlciA9ICQoJy5zdWJtaXQtbG9hZGVyJyk7XG4gICAgICAgIHZhciBmb3JtVHlwZSA9ICQoJ2Zvcm0nKS5hdHRyKCdjbC1mb3JtLXR5cGUnKTtcbiAgICAgICAgY29uc29sZS5sb2coZm9ybVR5cGUpO1xuICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgIGZvcm06IGZvcm1UeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6ICQoJyNjb250YWN0Rm9ybScpLnNlcmlhbGl6ZSgpXG4gICAgICAgIH1cbiAgICAgICAgJC5hamF4KHtcblxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICB1cmw6IFwicGFja2FnZXMvc2FtL3RoZW1lLVNBTS9pbmMvc2VuZEVtYWlsLnBocFwiLFxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpLFxuICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7IFxuXG4gICAgICAgICAgICAgICAgc0xvYWRlci5zbGlkZURvd24oXCJzbG93XCIpO1xuXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24obXNnKSB7XG5cbiAgICAgICAgICAgIC8vIE1lc3NhZ2Ugd2FzIHNlbnRcbiAgICAgICAgICAgICAgICBpZiAobXNnID09ICdPSycgKSB7XG4gICAgICAgICAgICAgICAgICAgIHNMb2FkZXIuc2xpZGVVcChcInNsb3dcIik7IFxuICAgICAgICAgICAgICAgICAgICAkKCcubWVzc2FnZS13YXJuaW5nMScpLmZhZGVPdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgJCgnI2NvbnRhY3RGb3JtLCAjZm9ybW1ha2VyLWZvcm0nKS5mYWRlT3V0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlLXN1Y2Nlc3MxJykuZmFkZUluKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFRoZXJlIHdhcyBhbiBlcnJvclxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzTG9hZGVyLnNsaWRlVXAoXCJzbG93XCIpOyBcbiAgICAgICAgICAgICAgICAgICAgJCgnLm1lc3NhZ2Utd2FybmluZzEnKS5odG1sKG1zZyk7XG4gICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlLXdhcm5pbmcxJykuc2xpZGVEb3duKFwic2xvd1wiKTtcbiAgICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIHNMb2FkZXIuc2xpZGVVcChcInNsb3dcIik7IFxuICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlLXdhcm5pbmcxJykuaHRtbChcIlNvbWV0aGluZyB3ZW50IHdyb25nLiBQbGVhc2UgdHJ5IGFnYWluLiBvciBjb250YWN0IHVzIGRpcmVjdGx5IGF0IDxhIGhyZWY9J21haWx0bzpzYW1Ac2FtaXNjb2RpbmcuY29tJz48c3Ryb25nPlNBTUBzYW1pc2NvZGluZy5jb208L3N0cm9uZz48L2E+XCIpO1xuICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlLXdhcm5pbmcxJykuc2xpZGVEb3duKFwic2xvd1wiKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0pO1xuICAgICAgICAvKiBsb2NhbCB2YWxpZGF0aW9uICovXG4gICAgICAgIC8vICQoJyNjb250YWN0Rm9ybSwgI2Zvcm1tYWtlci1mb3JtJykudmFsaWRhdGUoe1xuICAgICAgICBcbiAgICAgICAgLy8gICAgIC8qIHN1Ym1pdCB2aWEgYWpheCAqL1xuICAgICAgICAvLyAgICAgc3VibWl0SGFuZGxlcjogZnVuY3Rpb24oZm9ybSkge1xuICAgIFxuXG4gICAgICAgIC8vICAgICB9XG4gICAgXG4gICAgICAgIC8vIH0pO1xuICAgIH07XG5cbiAgIC8qIEJlbmNobWFyayBGb3JtXG4gICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbiAgIHZhciBjbEJlbmNobWFya0Zvcm0gPSBmdW5jdGlvbigpe1xuICAgICAgICAvKiBsb2NhbCB2YWxpZGF0aW9uICovXG4gICAgICAgIC8vICQoJyNmb3JtbWFrZXItZm9ybScpLnZhbGlkYXRlKHtcbiAgICAgICAgXG4gICAgICAgIC8vICAgICAvKiBzdWJtaXQgdmlhIGFqYXggKi9cbiAgICAgICAgLy8gICAgIHN1Ym1pdEhhbmRsZXI6IGZ1bmN0aW9uKGZvcm0pIHtcbiAgICBcbiAgICAgICAgICAgICAgICB2YXIgc0xvYWRlciA9ICQoJy5zdWJtaXQtbG9hZGVyJyk7XG4gICAgICAgICAgICAgICAgdmFyIGZvcm1UeXBlID0gJCgnZm9ybScpLmF0dHIoJ2NsLWZvcm0tdHlwZScpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGZvcm1UeXBlKTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybTogZm9ybVR5cGUsXG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhOiAkKCcjZm9ybW1ha2VyLWZvcm0nKS5zZXJpYWxpemUoKVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiUE9TVFwiLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwicGFja2FnZXMvc2FtL3RoZW1lLVNBTS9pbmMvc2VuZEVtYWlsLnBocFwiLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7IFxuICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgc0xvYWRlci5zbGlkZURvd24oXCJzbG93XCIpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihtc2cpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1lc3NhZ2Ugd2FzIHNlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtc2cgPT0gJ09LJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNMb2FkZXIuc2xpZGVVcChcInNsb3dcIik7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy5tZXNzYWdlLXdhcm5pbmcxJykuZmFkZU91dCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNmb3JtbWFrZXItZm9ybScpLmZhZGVPdXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubWVzc2FnZS1zdWNjZXNzMScpLmZhZGVJbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlcmUgd2FzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzTG9hZGVyLnNsaWRlVXAoXCJzbG93XCIpOyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubWVzc2FnZS13YXJuaW5nMScpLmh0bWwobXNnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcubWVzc2FnZS13YXJuaW5nMScpLnNsaWRlRG93bihcInNsb3dcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbigpIHtcbiAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIHNMb2FkZXIuc2xpZGVVcChcInNsb3dcIik7IFxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1lc3NhZ2Utd2FybmluZzEnKS5odG1sKFwiU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnLm1lc3NhZ2Utd2FybmluZzEnKS5zbGlkZURvd24oXCJzbG93XCIpO1xuICAgIFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgXG4gICAgICAgIC8vIH0pO1xuICAgfVxuXG4gICAvKiBBbmltYXRlIE9uIFNjcm9sbFxuICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgdmFyIGNsQU9TID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICBBT1MuaW5pdCgge1xuICAgICAgICAgICAgb2Zmc2V0OiAyMDAsXG4gICAgICAgICAgICBkdXJhdGlvbjogNTAwLFxuICAgICAgICAgICAgZWFzaW5nOiAnZWFzZS1pbi1zaW5lJyxcbiAgICAgICAgICAgIGRlbGF5OiAyMDAsXG4gICAgICAgICAgICBvbmNlOiB0cnVlLFxuICAgICAgICAgICAgZGlzYWJsZTogJ21vYmlsZSdcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG5cbiAgIC8qIEFqYXhDaGltcFxuICAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG4gICAgdmFyIGNsQWpheENoaW1wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICAkKCcjbWMtZm9ybScpLmFqYXhDaGltcCh7XG4gICAgICAgICAgICBsYW5ndWFnZTogJ2VzJyxcbiAgICAgICAgICAgIHVybDogY2ZnLm1haWxDaGltcFVSTFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBNYWlsY2hpbXAgdHJhbnNsYXRpb25cbiAgICAgICAgLy9cbiAgICAgICAgLy8gIERlZmF1bHRzOlxuICAgICAgICAvL1x0ICdzdWJtaXQnOiAnU3VibWl0dGluZy4uLicsXG4gICAgICAgIC8vICAwOiAnV2UgaGF2ZSBzZW50IHlvdSBhIGNvbmZpcm1hdGlvbiBlbWFpbCcsXG4gICAgICAgIC8vICAxOiAnUGxlYXNlIGVudGVyIGEgdmFsdWUnLFxuICAgICAgICAvLyAgMjogJ0FuIGVtYWlsIGFkZHJlc3MgbXVzdCBjb250YWluIGEgc2luZ2xlIEAnLFxuICAgICAgICAvLyAgMzogJ1RoZSBkb21haW4gcG9ydGlvbiBvZiB0aGUgZW1haWwgYWRkcmVzcyBpcyBpbnZhbGlkICh0aGUgcG9ydGlvbiBhZnRlciB0aGUgQDogKScsXG4gICAgICAgIC8vICA0OiAnVGhlIHVzZXJuYW1lIHBvcnRpb24gb2YgdGhlIGVtYWlsIGFkZHJlc3MgaXMgaW52YWxpZCAodGhlIHBvcnRpb24gYmVmb3JlIHRoZSBAOiApJyxcbiAgICAgICAgLy8gIDU6ICdUaGlzIGVtYWlsIGFkZHJlc3MgbG9va3MgZmFrZSBvciBpbnZhbGlkLiBQbGVhc2UgZW50ZXIgYSByZWFsIGVtYWlsIGFkZHJlc3MnXG5cbiAgICAgICAgJC5hamF4Q2hpbXAudHJhbnNsYXRpb25zLmVzID0ge1xuICAgICAgICAgICAgJ3N1Ym1pdCc6ICdTdWJtaXR0aW5nLi4uJyxcbiAgICAgICAgICAgIDA6ICc8aSBjbGFzcz1cImZhIGZhLWNoZWNrXCI+PC9pPiBXZSBoYXZlIHNlbnQgeW91IGEgY29uZmlybWF0aW9uIGVtYWlsJyxcbiAgICAgICAgICAgIDE6ICc8aSBjbGFzcz1cImZhIGZhLXdhcm5pbmdcIj48L2k+IFlvdSBtdXN0IGVudGVyIGEgdmFsaWQgZS1tYWlsIGFkZHJlc3MuJyxcbiAgICAgICAgICAgIDI6ICc8aSBjbGFzcz1cImZhIGZhLXdhcm5pbmdcIj48L2k+IEUtbWFpbCBhZGRyZXNzIGlzIG5vdCB2YWxpZC4nLFxuICAgICAgICAgICAgMzogJzxpIGNsYXNzPVwiZmEgZmEtd2FybmluZ1wiPjwvaT4gRS1tYWlsIGFkZHJlc3MgaXMgbm90IHZhbGlkLicsXG4gICAgICAgICAgICA0OiAnPGkgY2xhc3M9XCJmYSBmYS13YXJuaW5nXCI+PC9pPiBFLW1haWwgYWRkcmVzcyBpcyBub3QgdmFsaWQuJyxcbiAgICAgICAgICAgIDU6ICc8aSBjbGFzcz1cImZhIGZhLXdhcm5pbmdcIj48L2k+IEUtbWFpbCBhZGRyZXNzIGlzIG5vdCB2YWxpZC4nXG4gICAgICAgIH0gXG5cbiAgICB9O1xuXG5cblxuICAgLyogQmFjayB0byBUb3BcbiAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIHZhciBjbEJhY2tUb1RvcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBcbiAgICAgICAgdmFyIHB4U2hvdyAgPSA1MDAsICAgICAgICAgLy8gaGVpZ2h0IG9uIHdoaWNoIHRoZSBidXR0b24gd2lsbCBzaG93XG4gICAgICAgIGZhZGVJblRpbWUgID0gNDAwLCAgICAgICAgIC8vIGhvdyBzbG93L2Zhc3QgeW91IHdhbnQgdGhlIGJ1dHRvbiB0byBzaG93XG4gICAgICAgIGZhZGVPdXRUaW1lID0gNDAwLCAgICAgICAgIC8vIGhvdyBzbG93L2Zhc3QgeW91IHdhbnQgdGhlIGJ1dHRvbiB0byBoaWRlXG4gICAgICAgIHNjcm9sbFNwZWVkID0gJ2Zhc3QnLCAgICAgICAgIC8vIGhvdyBzbG93L2Zhc3QgeW91IHdhbnQgdGhlIGJ1dHRvbiB0byBzY3JvbGwgdG8gdG9wLiBjYW4gYmUgYSB2YWx1ZSwgJ3Nsb3cnLCAnbm9ybWFsJyBvciAnZmFzdCdcbiAgICAgICAgZ29Ub3BCdXR0b24gPSAkKFwiLmdvLXRvcFwiKVxuICAgICAgICBcbiAgICAgICAgLy8gU2hvdyBvciBoaWRlIHRoZSBzdGlja3kgZm9vdGVyIGJ1dHRvblxuICAgICAgICAkKHdpbmRvdykub24oJ3Njcm9sbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKCQod2luZG93KS5zY3JvbGxUb3AoKSA+PSBweFNob3cpIHtcbiAgICAgICAgICAgICAgICBnb1RvcEJ1dHRvbi5mYWRlSW4oZmFkZUluVGltZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvVG9wQnV0dG9uLmZhZGVPdXQoZmFkZU91dFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG5cbiAgIC8qIEluaXRpYWxpemVcbiAgICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuICAgIChmdW5jdGlvbiBzc0luaXQoKSB7XG4gICAgICAgIFxuICAgICAgICBjbFByZWxvYWRlcigpO1xuICAgICAgICBjbE1lbnVPblNjcm9sbGRvd24oKTtcbiAgICAgICAgY2xPZmZDYW52YXMoKTtcbiAgICAgICAgLy8gY2xQaG90b3N3aXBlKCk7XG4gICAgICAgIGNsU3RhdENvdW50KCk7XG4gICAgICAgIC8vIGNsTWFzb25yeUZvbGlvKCk7XG4gICAgICAgIGNsU2xpY2tTbGlkZXIoKTtcbiAgICAgICAgY2xQbGFjZWhvbGRlcigpO1xuICAgICAgICBjbEFsZXJ0Qm94ZXMoKTtcbiAgICAgICAgLy8gY2xDb250YWN0Rm9ybSgpO1xuICAgICAgICBjbEFPUygpO1xuICAgICAgICBjbEFqYXhDaGltcCgpO1xuICAgICAgICBjbEJhY2tUb1RvcCgpO1xuICAgICAgICAvLyBjbEJlbmNobWFya0Zvcm0oKTtcbiAgICB9KSgpO1xuICAgICAgICBcbiAgICAgICAgLy9leHBvcnQgY29udGFjdCBmb3JtIHNjcmlwdFxuICAgICAgICB3aW5kb3cuY2xDb250YWN0Rm9ybSA9IGNsQ29udGFjdEZvcm07XG4gICAgICAgIHdpbmRvdy5jbEJlbmNobWFya0Zvcm0gPSBjbEJlbmNobWFya0Zvcm07XG59KShqUXVlcnkpOyJdfQ==
